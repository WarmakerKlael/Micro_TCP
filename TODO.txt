1)
Convert %d -> %u where you pass unsigned integers (like uint8_t, uint16_t, uint32_t)
Convert %d, u% -> %lu where you pass size_t integers.
Convert %d to %ld where you pass ssize_t integers.

2)
Polish all LOG messages. Some of them are ugly. Make Sure all provide useful information not just a message.
You should be able to know why you got the message and what caused it... Not just "State is wrong". Provide got and expected values, if available.

3)
For the last problem (2), you can maybe create macro that takes two parameters (got, received), and automatically converts them to 
"(%s = %d)|(%s = %d)", STRINGIFY(got), got, STRINGIFY(expected), expected.
Figure it out ... There are multiple ways to do it... find most elegant. Maybe a ned PRINT_LOG macro would be best. Suitable for such LOG messages.


Example of such print:

PRINT_WARNING_RETURN(0, "Not enough space in the receive buffer, to receive syn-ack segment. (%s = %u)|(%s = %u)|(Limit = %d)",
                        STRINGIFY(_socket->buf_fill_level), _socket->buf_fill_level,
                        STRINGIFY(expected_segment_size), expected_segment_size,
                        MICROTCP_RECVBUF_LEN);

4)
Conver MALLOC_LOG to CALLOC_LOG and make it use calloc.

5)
Write documentation for each function /** */ style.

6)
Refine code comments.

7)
Include function that can set the print stream.